compute_f_hat(-0.96, x, y, 2)
round(.1233553, digits =3)
round(.1233553, digits =4)
diag(make_weight_matrix(-.2, c(-.4:.4, length=5), omega = 1)
diag(make_weight_matrix(-.2, c(-.4:.4, length=5), omega = 1))
diag(make_weight_matrix(-.2, c(-.4:.4, length=5), omega = 1))
c(-.4:.4, length=5)
seq(-.4:.4, length=5)
c(-.4:.4, length.out=5)
diag(make_weight_matrix(-.2, c(-.4, -.2, 0, .2, .4), omega = 1))
install.packages("rbenchmark")
library(rbenchmark)
benchmark(lm(y~x))
benchmark(lm(y~2*x+x^2))
benchmark(lm(y~2*x+rnorm(120)))
benchmark(lm(y~x+rnorm(120)))
install.packages("microbenchmark")
library(microbenchmark)
microbenchmark(m1=lm(y~x), m2=lm(y~x+rnorm(120)))
qnorm(999999/1000000, 100, 20)
library(ggplot2)
library(ggthemes)
library(alr4)
fuel2001$logFuelC <- log(fuel2001$FuelC)
fuel2001$logDrivers <- log(fuel2001$Drivers)
fuel2001$logPop <- log(fuel2001$Pop)
scatterplotMatrix(fuel2001[,c(8,3:5,7,9:10)])
Pop_quantiles <- quantile(fuel2001$Pop, c(0.33,0.67))
fuel2001$HighPop <- 1*(fuel2001$Pop > Pop_quantiles[2])
fuel2001$MediumPop <- 1*(fuel2001$Pop > Pop_quantiles[1] & fuel2001$Pop <= Pop_quantiles[2])
fuel2001$LowPop <- 1*(fuel2001$Pop <= Pop_quantiles[1])
fuel2001$PopSize <- 'low'
fuel2001$PopSize[fuel2001$MediumPop==1] <- 'medium'
fuel2001$PopSize[fuel2001$HighPop==1] <- 'high'
fuel2001$PopSize <- factor(fuel2001$PopSize, levels = c('medium','low', 'high'))
summary(model1 <- lm(logFuelC ~ LowPop + MediumPop + HighPop - 1, data=fuel2001))
summary(model1 <- lm(logFuelC ~ PopSize - 1, data=fuel2001)) #equivalent
fuel2001$PopSize
summary(model2 <- lm(model2 <- logFuelC ~ LowPop + HighPop, data=fuel2001))
summary(model2 <- lm(model2 <- logFuelC ~ PopSize, data=fuel2001)) #equivalent
fuel2001$PopSize1 <- factor(fuel2001$PopSize, levels = c('low','medium', 'high'))
summary(model2b <- lm(model2b <- logFuelC ~ MediumPop + HighPop, data=fuel2001))
fuel2001$Miles2 <- fuel2001$Miles/100000
summary(model3 <- lm(logFuelC ~ PopSize + Miles2 - 1, data=fuel2001))
summary(fuel2001$Miles2)
newdat <- expand.grid(Miles2 = seq(0.01,3,0.01), PopSize = levels(fuel2001$PopSize))
newdat$pred <- predict(model3, newdata = newdat)
head(newdat)
ggplot(newdat, aes(x=Miles2, y=pred, group=PopSize, color=PopSize)) + geom_line()
fuel2001$Miles2 <- fuel2001$Miles/100000
summary(model4 <- lm(logFuelC ~ PopSize + Miles2 + PopSize:Miles2 - 1, data=fuel2001))
summary(model4 <- lm(logFuelC ~ PopSize*Miles2 - 1, data=fuel2001)) #equivalent
fuel2001$PopSize <- factor(fuel2001$PopSize, levels = c('medium','low', 'high'))
fuel2001$Miles2 <- fuel2001$Miles/100000
summary(model4 <- lm(logFuelC ~ PopSize + Miles2 + PopSize:Miles2 - 1, data=fuel2001))
summary(model4 <- lm(logFuelC ~ PopSize*Miles2 - 1, data=fuel2001)) #equivalent
summary(fuel2001$Miles2)
newdat <- expand.grid(Miles2 = seq(0.01,3,0.01), PopSize = levels(fuel2001$PopSize))
newdat$pred <- predict(model4, newdata = newdat)
head(newdat)
ggplot(newdat, aes(x=Miles2, y=pred, group=PopSize, color=PopSize)) + geom_line()
summary(model5 <- lm(logFuelC ~ PopSize + Miles2 + PopSize:Miles2, data=fuel2001))
summary(model5 <- lm(logFuelC ~ PopSize*Miles2, data=fuel2001)) #equivalent
0.57906-0.05773
summary(fuel2001$Miles2)
newdat <- expand.grid(Miles2 = seq(0.01,3,0.01), PopSize = levels(fuel2001$PopSize))
newdat$pred <- predict(model5, newdata = newdat)
head(newdat)
ggplot(newdat, aes(x=Miles2, y=pred, group=PopSize, color=PopSize)) + geom_line()
test <- rpois(40, 5)
z <- (test-mean(test))/sd(test)
hist(t)
hist(z)
test <- rpois(100, 5)
z <- (test-mean(test))/sd(test)
hist(z)
cor(test, z)
log(m)
log(3)
e(log(3))
exp(log(3))
exp(log(1))
exp(1
)
exp(-1)
x <- c(0:9)
mean(x)
sd(x)
sd(x)^2
mean(x^2)
28.5-4.5^2
0.1*sum((x-mean(x))^2)
pnorm(6, 4.5, sqrt(0.0825))-pnorm(4,4.5,sqrt(0.0825))
library(tidyverse)
demographic <- read.csv(file= "/Users/nnnguyen/Documents/FinalProject/KKI_demographicInfo.csv")
View(demographic)
demographic <- read.csv(file= "/Users/nnnguyen/Documents/FinalProject/KKI_demographicInfo.csv")
mABC <- read.csv(file= "/Users/nnnguyen/Documents/FinalProject/KKI_movementAssessmentBatteryforChildren.csv")
SRS <- read.csv(file= "/Users/nnnguyen/Documents/FinalProject/KKI_SocialResponsivenessScaleQuestionnaire.csv")
WISC <- read.csv(file= "/Users/nnnguyen/Documents/FinalProject/KKI_WechslerIntelligenceScaleforChildren.csv")
wisc4 <- read.csv(file= "/Users/nnnguyen/Documents/FinalProject/wisc4GAI_lookup.csv")
wisc5 <- read.csv(file= "/Users/nnnguyen/Documents/FinalProject/wisc5GAI_lookup.csv")
View(mABC)
View(demographic)
View(mABC)
help("full_join")
main <- full_join(mABC, demographic, by=c("ID"))
View(main)
summary(main$visit)
main <- full_join(mABC, demographic, by=c("ID"))
main1 <- main[which(main$visit = 1),]
main <- full_join(mABC, demographic, by=c("ID"))
main1 <- main[which(main$visit == 1),]
head(main1)
View(main1)
View(demographic)
dt <- full_join(demographic, mABC, by=ID)
dt <- full_join(demographic, mABC, by = "ID")
View(dt)
View(demographic)
View(mABC)
View(dt)
dt <- dt[which(dt$visit == 1 & dt$PrimaryDiagnosis == "None" & dt$mABC_AGE <= 13)]
dt <- dt[which(dt$visit == 1 & dt$PrimaryDiagnosis == "None" & dt$mABC_AGE <= 13),]
dt <- full_join(demographic, mABC, by = "ID")
dt1 <- dt[which(dt$visit == 1 & dt$PrimaryDiagnosis == "None" & dt$mABC_AGE <= 13),]
nrow(dt1) # number of observations the resulting data contains
nrow(dt[which(dt$mABC_AGE <= 13),]) # number of observations were excluded by limiting the age range
nrow(dt1) # number of observations the resulting data contains
nrow(dt)-nrow(dt[which(dt$mABC_AGE <= 13),]) # number of observations were excluded by limiting the age range
ggplot(data = dt1, aes(x = dt1$mABC_AGE, y = dt1$mABC_TotalStandardScore)) + geom_smooth() + geom_smooth(method = "lm")
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_smooth() + geom_smooth(method = "lm")
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_smooth() + geom_smooth(method = "lm", col = "red")
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + geom_smooth() + geom_smooth(method = "lm", col = "red")
m1 <- lm(mABC_TotalStandardScore ~ mABC_AGE, data = dt1)
m1 <- lm(mABC_TotalStandardScore ~ mABC_AGE, data = dt1)
summary(m1)
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_smooth() + geom_smooth(method = "lm", col = "red")
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + geom_smooth() + geom_smooth(method = "lm", col = "red")
m2 <- lm(mABC_TotalStandardScore ~ poly(mABC_AGE, 9), data = dt1)
m2 <- lm(mABC_TotalStandardScore ~ poly(mABC_AGE, 9), data = dt1)
summary(m2)
plot(m2)
ggplot(data = dt1, aes(x=poly(mABC_AGE, 9), y=mABC_TotalStandardScore)) + geom_point() + geom_smooth(method = "lm")
ggplot(data = dt1, aes(x=poly(mABC_AGE, 9), y=mABC_TotalStandardScore)) + geom_point() + geom_smooth()
xx <- seq(0, 11, length.out = 250)
lines(xx, predict(m2, data.frame(mABC_AGE=xx)))
lines(xx, predict(m2, data.frame(mABC_AGE=xx)))
lines(xx, predict(m2, data.frame(x=xx)))
pred <- predict(m2, data.frame(x = mABC_AGE))
pred <- predict(m2, data.frame(x = dt1$mABC_AGE))
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,9), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,10), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,8), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,7), size=1)
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + geom_smooth()
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + geom_smooth()
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,7), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,6), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,5), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,4), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,3), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,2), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,3), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,4), size=1)
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + geom_smooth() + geom_smooth(method = "lm", col = "red")
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + geom_smooth() + geom_smooth(method = "lm", col = "red")
m2 <- lm(mABC_TotalStandardScore ~ poly(mABC_AGE, 3), data = dt1)
summary(m2)
# ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,9), size=1)
library(tidyverse)
library(splines)
m3 <- lm(mABC_TotalStandardScore ~ bs(mABC_AGE, df = 3, degree = 3), data = dt1)
dt1$pred_bs <- predict(m3)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +geom_smooth() +
geom_line(aes(y=pred_bs), color='red') +
theme_few()
m3 <- lm(mABC_TotalStandardScore ~ bs(mABC_AGE, df = 3, degree = 4), data = dt1)
dt1$pred_bs <- predict(m3)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +geom_smooth() +
geom_line(aes(y=pred_bs), color='red') +
theme_few()
m3 <- lm(mABC_TotalStandardScore ~ bs(mABC_AGE, df = 4, degree = 3), data = dt1)
dt1$pred_bs <- predict(m3)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +geom_smooth() +
geom_line(aes(y=pred_bs), color='red') +
theme_few()
m3 <- lm(mABC_TotalStandardScore ~ bs(mABC_AGE, df = 4, degree = 4), data = dt1)
dt1$pred_bs <- predict(m3)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +geom_smooth() +
geom_line(aes(y=pred_bs), color='red') +
theme_few()
m3 <- lm(mABC_TotalStandardScore ~ bs(mABC_AGE, df = 3, degree = 3), data = dt1)
dt1$pred_bs <- predict(m3)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +geom_smooth() +
geom_line(aes(y=pred_bs), color='red') +
theme_few()
m4 <- lm(mABC_TotalStandardScore ~ ns(mABC_AGE, df = 3), data = dt1)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_smooth() +
geom_line(aes(y=pred_bs), color='red') +
geom_line(aes(y=pred_ns), color='purple') +
theme_few()
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly), color='green') +
geom_line(aes(y=pred_bs), color='red') +
geom_line(aes(y=pred_ns), color='purple') +
theme_few()
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly), color='green') +
geom_line(aes(y=pred_bs), color='red') +
geom_line(aes(y=pred_ns), color='purple') +
theme_few()
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly), color='black') +
geom_line(aes(y=pred_bs), color='red') +
geom_line(aes(y=pred_ns), color='purple') +
theme_few()
m2 <- lm(mABC_TotalStandardScore ~ poly(mABC_AGE, 3), data = dt1)
summary(m2)
dt1$pred_poly <- predict(m2)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +geom_smooth() +
geom_line(aes(y=pred_poly), color='red') +
theme_few()
# ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,3), size=1)
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly), color='polynomial') +
geom_line(aes(y=pred_bs), color='basic spline') +
geom_line(aes(y=pred_ns), color='natural cubic spline') +
scale_color_manual("",
values = c("polynomial"="green", "basic spline"="red", "natural cubic spline"="purple"))
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly), color="polynomial") +
geom_line(aes(y=pred_bs), color="basic spline") +
geom_line(aes(y=pred_ns), color="natural cubic spline") +
scale_color_manual("",
breaks = c("polynomial","basic spline","natural cubic spline"),
values = c("green","red","purple"))
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly, color="polynomial")) +
geom_line(aes(y=pred_bs, color="basic spline")) +
geom_line(aes(y=pred_ns, color="natural cubic spline")) +
scale_color_manual("",
breaks = c("polynomial","basic spline","natural cubic spline"),
values = c("green","red","purple"))
summary(m1)
test <- summary(m1)
test$adj.r.squared
summary(m1)$adj.r.squared
adj_R_square <- c(summary(m1)$adj.r.squared, summary(m2)$adj.r.squared, summary(m3)$adj.r.squared, summary(m4)$adj.r.squared)
table <- data.frame(c("linear","polynomial","basic spline","natural cubic spline"), adj_R_square)
table
adj_R_square <- c(summary(m1)$adj.r.squared, summary(m2)$adj.r.squared, summary(m3)$adj.r.squared, summary(m4)$adj.r.squared)
table <- data.frame(c("linear","polynomial","basic spline","natural cubic spline"), adj_R_square)
colnames(table) <- c("Model","Adjusted R-squared")
table
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + geom_smooth() + geom_smooth(method = "lm", col = "red")
m2 <- lm(mABC_TotalStandardScore ~ poly(mABC_AGE, 4), data = dt1)
summary(m2)
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly, color="polynomial")) +
geom_line(aes(y=pred_bs, color="basic spline")) +
geom_line(aes(y=pred_ns, color="natural cubic spline")) +
scale_color_manual("",
breaks = c("polynomial","basic spline","natural cubic spline"),
values = c("green","red","purple"))
adj_R_square <- c(summary(m1)$adj.r.squared, summary(m2)$adj.r.squared, summary(m3)$adj.r.squared, summary(m4)$adj.r.squared)
table <- data.frame(c("linear","polynomial","basic spline","natural cubic spline"), adj_R_square)
colnames(table) <- c("Model","Adjusted R-squared")
table
m2 <- lm(mABC_TotalStandardScore ~ poly(mABC_AGE, 9), data = dt1)
summary(m2)
m2 <- lm(mABC_TotalStandardScore ~ poly(mABC_AGE, 8), data = dt1)
summary(m2)
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly, color="polynomial")) +
geom_line(aes(y=pred_bs, color="basic spline")) +
geom_line(aes(y=pred_ns, color="natural cubic spline")) +
scale_color_manual("",
breaks = c("polynomial","basic spline","natural cubic spline"),
values = c("green","red","purple"))
m2 <- lm(mABC_TotalStandardScore ~ poly(mABC_AGE, 5), data = dt1)
summary(m2)
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly, color="polynomial")) +
geom_line(aes(y=pred_bs, color="basic spline")) +
geom_line(aes(y=pred_ns, color="natural cubic spline")) +
scale_color_manual("",
breaks = c("polynomial","basic spline","natural cubic spline"),
values = c("green","red","purple"))
m2 <- lm(mABC_TotalStandardScore ~ poly(mABC_AGE, 4), data = dt1)
summary(m2)
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly, color="polynomial")) +
geom_line(aes(y=pred_bs, color="basic spline")) +
geom_line(aes(y=pred_ns, color="natural cubic spline")) +
scale_color_manual("",
breaks = c("polynomial","basic spline","natural cubic spline"),
values = c("green","red","purple"))
adj_R_square <- c(summary(m1)$adj.r.squared, summary(m2)$adj.r.squared, summary(m3)$adj.r.squared, summary(m4)$adj.r.squared)
table <- data.frame(c("linear","polynomial","basic spline","natural cubic spline"), adj_R_square)
colnames(table) <- c("Model","Adjusted R-squared")
table
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_smooth(method = "lm", col = "red")
library(microbenchmark)
x <- rnorm(5)
y <- x+rnorm(5)
microbenchmark(lm(y~x))
typeof(microbenchmark(lm(y~x)))
class(microbenchmark(lm(y~x)))
str(microbenchmark(lm(y~x)))
cat(microbenchmark(lm(y~x)))
summary(microbenchmark(lm(y~x)))
summary(microbenchmark(lm(y~x)))[4]
summary(microbenchmark(lm(y~x), lm(y~poly(x,3))))[4]
summary(microbenchmark(lm(y~x), lm(y~poly(x,3))))
microbenchmark(lm(y~x), lm(y~poly(x,3)))
cat(summary(microbenchmark(lm(y~x), lm(y~poly(x,3))))[4])
test <- function(str){
str <- as.character(str)
t <- cat("what the hell is ", str)
}
test(money)
test(str=money)
test(4)
test <- function(str){
str <- as.character(str)
cat("what the hell is ", str)
}
test("heo")
test <- function(str){
str <- as.character(str)
cat("what the hell is", str, "cause I don't know")
}
test("heo")
speedTest <- function(func) {
m <- summary(microbenchmark(func))
cat("It takes", m[4], "microseconds for the function", func, "to run.")
}
speedTest(lm(y~x))
typeof(summary(microbenchmark(lm(y~x))))
unlist(summary(microbenchmark(lm(y~x))))
typeof(unlist(summary(microbenchmark(lm(y~x)))))
unlist(summary(microbenchmark(lm(y~x))))[4]
unname(unlist(summary(microbenchmark(lm(y~x))))[4])
speedTest <- function(func) {
m <- unlist(summary(microbenchmark(func)))
m <- unname(m[4])
cat("It takes", m, "microseconds for the function", func, "to run.")
}
speedTest(lm(y~x))
speedTest <- function(func) {
f <- as.character(func)
m <- unlist(summary(microbenchmark(func)))
m <- unname(m[4])
cat("It takes", m, "microseconds for the function", f, "to run.")
}
speedTest(lm(y~x))
speedTest <- function(func) {
f <- as.character(func)
m <- unlist(summary(microbenchmark(func)))
m <- unname(m[4])
cat("It takes", m, "microseconds for the function to run.")
}
speedTest(lm(y~x))
unlist(summary(microbenchmark(lm(y~x))))
m <- unlist(summary(microbenchmark(lm(y~x))))
unname(m[4])
m
m
unlist(summary(microbenchmark(lm(y~x))))
speedTest(lm(y~x))
speedTest(lm(y~x))
speedTest(lm(y~x))
summary(microbenchmark(func))
summary(microbenchmark(lm(y~x)))
microbenchmark(lm(y~x))
microbenchmark(lm(y~x))
microbenchmark(lm(y~x))
rm(test)
speedTest <- function(func) {
f <- as.character(func)
m <- unlist(summary(microbenchmark(func, times=50)))
m <- unname(m[4])
cat("It takes", m, "microseconds for the function to run.")
}
speedTest(lm(y~x))
microbenchmark(lm(y~x))
microbenchmark(lm(y~x))[4]
unlist(microbenchmark(lm(y~x)))[4]
unlist(summary(microbenchmark(lm(y~x))))[4]
speedTest <- function(func) {
m <- unlist(summary(microbenchmark(func, times=50)))[4]
m <- unname(m)
cat("It takes", m, "microseconds for the function to run.")
}
speedTest(lm(y~x))
speedTest <- function(func) {
m <- unlist(summary(microbenchmark(func, times=50)))[4]
time <- unname(m)
cat("It takes", m, "microseconds for the function to run.")
}
speedTest <- function(func) {
m <- unlist(summary(microbenchmark(func, times=50)))[4]
time <- unname(m)
cat("It takes", time, "microseconds for the function to run.")
}
model <- lm(y~x)
speedTest(model)
speedTest(model)
speedTest(model)
func <- lm(y~x)
#speedTest <- function(func) {
m <- unlist(summary(microbenchmark(func, times=50)))[4]
time <- unname(m)
cat("It takes", time, "microseconds for the function to run.")
m
unlist(summary(microbenchmark(func, times=50)))
microbenchmark(lm())
summary(microbenchmark(func, times=50)))
summary(microbenchmark(func, times=50))
microbenchmark(func, times=50)
microbenchmark(lm(y~x), times=50)
source("llr_function.R")
setwd("~/Desktop/homeWork")
source("llr_function.R")
n = 150
x = rnorm(n)
y = rnorm(x + rnorm(n))
z = seq(-1, 1, length.out = 100)
m <- unlist(summary(microbenchmark(llr(x,y,x,omega))))
n = 150
omega = 2
x = rnorm(n)
y = rnorm(x + rnorm(n))
z = seq(-1, 1, length.out = 100)
m <- unlist(summary(microbenchmark(llr(x,y,x,omega))))
time <- unname(m[4])
cat("It takes", time, "microseconds for the function to run")
m
microbenchmark(llr(x,y,x,omega))
convert_to_unit(microbenchmark(llr(x,y,x,omega)), unit="ms")
n = 150
omega = 2
x = rnorm(n)
y = rnorm(x + rnorm(n))
z = seq(-1, 1, length.out = 100)
# Note that we use the unit of milliseconds to check speed of function llr
# May need to check the unit first
m <- unlist(summary(microbenchmark(llr(x,y,x,omega))))
time <- unname(m[4])
cat("It takes", time, "milliseconds for the function to run.")
