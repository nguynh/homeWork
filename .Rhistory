ggplot(newdat, aes(x=Miles2, y=pred, group=PopSize, color=PopSize)) + geom_line()
summary(model5 <- lm(logFuelC ~ PopSize + Miles2 + PopSize:Miles2, data=fuel2001))
summary(model5 <- lm(logFuelC ~ PopSize*Miles2, data=fuel2001)) #equivalent
0.57906-0.05773
summary(fuel2001$Miles2)
newdat <- expand.grid(Miles2 = seq(0.01,3,0.01), PopSize = levels(fuel2001$PopSize))
newdat$pred <- predict(model5, newdata = newdat)
head(newdat)
ggplot(newdat, aes(x=Miles2, y=pred, group=PopSize, color=PopSize)) + geom_line()
test <- rpois(40, 5)
z <- (test-mean(test))/sd(test)
hist(t)
hist(z)
test <- rpois(100, 5)
z <- (test-mean(test))/sd(test)
hist(z)
cor(test, z)
log(m)
log(3)
e(log(3))
exp(log(3))
exp(log(1))
exp(1
)
exp(-1)
x <- c(0:9)
mean(x)
sd(x)
sd(x)^2
mean(x^2)
28.5-4.5^2
0.1*sum((x-mean(x))^2)
pnorm(6, 4.5, sqrt(0.0825))-pnorm(4,4.5,sqrt(0.0825))
library(tidyverse)
demographic <- read.csv(file= "/Users/nnnguyen/Documents/FinalProject/KKI_demographicInfo.csv")
View(demographic)
demographic <- read.csv(file= "/Users/nnnguyen/Documents/FinalProject/KKI_demographicInfo.csv")
mABC <- read.csv(file= "/Users/nnnguyen/Documents/FinalProject/KKI_movementAssessmentBatteryforChildren.csv")
SRS <- read.csv(file= "/Users/nnnguyen/Documents/FinalProject/KKI_SocialResponsivenessScaleQuestionnaire.csv")
WISC <- read.csv(file= "/Users/nnnguyen/Documents/FinalProject/KKI_WechslerIntelligenceScaleforChildren.csv")
wisc4 <- read.csv(file= "/Users/nnnguyen/Documents/FinalProject/wisc4GAI_lookup.csv")
wisc5 <- read.csv(file= "/Users/nnnguyen/Documents/FinalProject/wisc5GAI_lookup.csv")
View(mABC)
View(demographic)
View(mABC)
help("full_join")
main <- full_join(mABC, demographic, by=c("ID"))
View(main)
summary(main$visit)
main <- full_join(mABC, demographic, by=c("ID"))
main1 <- main[which(main$visit = 1),]
main <- full_join(mABC, demographic, by=c("ID"))
main1 <- main[which(main$visit == 1),]
head(main1)
View(main1)
View(demographic)
dt <- full_join(demographic, mABC, by=ID)
dt <- full_join(demographic, mABC, by = "ID")
View(dt)
View(demographic)
View(mABC)
View(dt)
dt <- dt[which(dt$visit == 1 & dt$PrimaryDiagnosis == "None" & dt$mABC_AGE <= 13)]
dt <- dt[which(dt$visit == 1 & dt$PrimaryDiagnosis == "None" & dt$mABC_AGE <= 13),]
dt <- full_join(demographic, mABC, by = "ID")
dt1 <- dt[which(dt$visit == 1 & dt$PrimaryDiagnosis == "None" & dt$mABC_AGE <= 13),]
nrow(dt1) # number of observations the resulting data contains
nrow(dt[which(dt$mABC_AGE <= 13),]) # number of observations were excluded by limiting the age range
nrow(dt1) # number of observations the resulting data contains
nrow(dt)-nrow(dt[which(dt$mABC_AGE <= 13),]) # number of observations were excluded by limiting the age range
ggplot(data = dt1, aes(x = dt1$mABC_AGE, y = dt1$mABC_TotalStandardScore)) + geom_smooth() + geom_smooth(method = "lm")
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_smooth() + geom_smooth(method = "lm")
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_smooth() + geom_smooth(method = "lm", col = "red")
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + geom_smooth() + geom_smooth(method = "lm", col = "red")
m1 <- lm(mABC_TotalStandardScore ~ mABC_AGE, data = dt1)
m1 <- lm(mABC_TotalStandardScore ~ mABC_AGE, data = dt1)
summary(m1)
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_smooth() + geom_smooth(method = "lm", col = "red")
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + geom_smooth() + geom_smooth(method = "lm", col = "red")
m2 <- lm(mABC_TotalStandardScore ~ poly(mABC_AGE, 9), data = dt1)
m2 <- lm(mABC_TotalStandardScore ~ poly(mABC_AGE, 9), data = dt1)
summary(m2)
plot(m2)
ggplot(data = dt1, aes(x=poly(mABC_AGE, 9), y=mABC_TotalStandardScore)) + geom_point() + geom_smooth(method = "lm")
ggplot(data = dt1, aes(x=poly(mABC_AGE, 9), y=mABC_TotalStandardScore)) + geom_point() + geom_smooth()
xx <- seq(0, 11, length.out = 250)
lines(xx, predict(m2, data.frame(mABC_AGE=xx)))
lines(xx, predict(m2, data.frame(mABC_AGE=xx)))
lines(xx, predict(m2, data.frame(x=xx)))
pred <- predict(m2, data.frame(x = mABC_AGE))
pred <- predict(m2, data.frame(x = dt1$mABC_AGE))
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,9), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,10), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,8), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,7), size=1)
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + geom_smooth()
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + geom_smooth()
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,7), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,6), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,5), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,4), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,3), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,2), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,3), size=1)
ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,4), size=1)
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + geom_smooth() + geom_smooth(method = "lm", col = "red")
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + geom_smooth() + geom_smooth(method = "lm", col = "red")
m2 <- lm(mABC_TotalStandardScore ~ poly(mABC_AGE, 3), data = dt1)
summary(m2)
# ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,9), size=1)
library(tidyverse)
library(splines)
m3 <- lm(mABC_TotalStandardScore ~ bs(mABC_AGE, df = 3, degree = 3), data = dt1)
dt1$pred_bs <- predict(m3)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +geom_smooth() +
geom_line(aes(y=pred_bs), color='red') +
theme_few()
m3 <- lm(mABC_TotalStandardScore ~ bs(mABC_AGE, df = 3, degree = 4), data = dt1)
dt1$pred_bs <- predict(m3)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +geom_smooth() +
geom_line(aes(y=pred_bs), color='red') +
theme_few()
m3 <- lm(mABC_TotalStandardScore ~ bs(mABC_AGE, df = 4, degree = 3), data = dt1)
dt1$pred_bs <- predict(m3)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +geom_smooth() +
geom_line(aes(y=pred_bs), color='red') +
theme_few()
m3 <- lm(mABC_TotalStandardScore ~ bs(mABC_AGE, df = 4, degree = 4), data = dt1)
dt1$pred_bs <- predict(m3)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +geom_smooth() +
geom_line(aes(y=pred_bs), color='red') +
theme_few()
m3 <- lm(mABC_TotalStandardScore ~ bs(mABC_AGE, df = 3, degree = 3), data = dt1)
dt1$pred_bs <- predict(m3)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +geom_smooth() +
geom_line(aes(y=pred_bs), color='red') +
theme_few()
m4 <- lm(mABC_TotalStandardScore ~ ns(mABC_AGE, df = 3), data = dt1)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_smooth() +
geom_line(aes(y=pred_bs), color='red') +
geom_line(aes(y=pred_ns), color='purple') +
theme_few()
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly), color='green') +
geom_line(aes(y=pred_bs), color='red') +
geom_line(aes(y=pred_ns), color='purple') +
theme_few()
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly), color='green') +
geom_line(aes(y=pred_bs), color='red') +
geom_line(aes(y=pred_ns), color='purple') +
theme_few()
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly), color='black') +
geom_line(aes(y=pred_bs), color='red') +
geom_line(aes(y=pred_ns), color='purple') +
theme_few()
m2 <- lm(mABC_TotalStandardScore ~ poly(mABC_AGE, 3), data = dt1)
summary(m2)
dt1$pred_poly <- predict(m2)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +geom_smooth() +
geom_line(aes(y=pred_poly), color='red') +
theme_few()
# ggplot(dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + stat_smooth(method="lm", formula = y ~ poly(x,3), size=1)
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly), color='polynomial') +
geom_line(aes(y=pred_bs), color='basic spline') +
geom_line(aes(y=pred_ns), color='natural cubic spline') +
scale_color_manual("",
values = c("polynomial"="green", "basic spline"="red", "natural cubic spline"="purple"))
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly), color="polynomial") +
geom_line(aes(y=pred_bs), color="basic spline") +
geom_line(aes(y=pred_ns), color="natural cubic spline") +
scale_color_manual("",
breaks = c("polynomial","basic spline","natural cubic spline"),
values = c("green","red","purple"))
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly, color="polynomial")) +
geom_line(aes(y=pred_bs, color="basic spline")) +
geom_line(aes(y=pred_ns, color="natural cubic spline")) +
scale_color_manual("",
breaks = c("polynomial","basic spline","natural cubic spline"),
values = c("green","red","purple"))
summary(m1)
test <- summary(m1)
test$adj.r.squared
summary(m1)$adj.r.squared
adj_R_square <- c(summary(m1)$adj.r.squared, summary(m2)$adj.r.squared, summary(m3)$adj.r.squared, summary(m4)$adj.r.squared)
table <- data.frame(c("linear","polynomial","basic spline","natural cubic spline"), adj_R_square)
table
adj_R_square <- c(summary(m1)$adj.r.squared, summary(m2)$adj.r.squared, summary(m3)$adj.r.squared, summary(m4)$adj.r.squared)
table <- data.frame(c("linear","polynomial","basic spline","natural cubic spline"), adj_R_square)
colnames(table) <- c("Model","Adjusted R-squared")
table
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) + geom_point() + geom_smooth() + geom_smooth(method = "lm", col = "red")
m2 <- lm(mABC_TotalStandardScore ~ poly(mABC_AGE, 4), data = dt1)
summary(m2)
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly, color="polynomial")) +
geom_line(aes(y=pred_bs, color="basic spline")) +
geom_line(aes(y=pred_ns, color="natural cubic spline")) +
scale_color_manual("",
breaks = c("polynomial","basic spline","natural cubic spline"),
values = c("green","red","purple"))
adj_R_square <- c(summary(m1)$adj.r.squared, summary(m2)$adj.r.squared, summary(m3)$adj.r.squared, summary(m4)$adj.r.squared)
table <- data.frame(c("linear","polynomial","basic spline","natural cubic spline"), adj_R_square)
colnames(table) <- c("Model","Adjusted R-squared")
table
m2 <- lm(mABC_TotalStandardScore ~ poly(mABC_AGE, 9), data = dt1)
summary(m2)
m2 <- lm(mABC_TotalStandardScore ~ poly(mABC_AGE, 8), data = dt1)
summary(m2)
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly, color="polynomial")) +
geom_line(aes(y=pred_bs, color="basic spline")) +
geom_line(aes(y=pred_ns, color="natural cubic spline")) +
scale_color_manual("",
breaks = c("polynomial","basic spline","natural cubic spline"),
values = c("green","red","purple"))
m2 <- lm(mABC_TotalStandardScore ~ poly(mABC_AGE, 5), data = dt1)
summary(m2)
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly, color="polynomial")) +
geom_line(aes(y=pred_bs, color="basic spline")) +
geom_line(aes(y=pred_ns, color="natural cubic spline")) +
scale_color_manual("",
breaks = c("polynomial","basic spline","natural cubic spline"),
values = c("green","red","purple"))
m2 <- lm(mABC_TotalStandardScore ~ poly(mABC_AGE, 4), data = dt1)
summary(m2)
dt1$pred_poly <- predict(m2)
dt1$pred_bs <- predict(m3)
dt1$pred_ns <- predict(m4)
ggplot(dt1, aes(x=mABC_AGE, y=mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_line(aes(y=pred_poly, color="polynomial")) +
geom_line(aes(y=pred_bs, color="basic spline")) +
geom_line(aes(y=pred_ns, color="natural cubic spline")) +
scale_color_manual("",
breaks = c("polynomial","basic spline","natural cubic spline"),
values = c("green","red","purple"))
adj_R_square <- c(summary(m1)$adj.r.squared, summary(m2)$adj.r.squared, summary(m3)$adj.r.squared, summary(m4)$adj.r.squared)
table <- data.frame(c("linear","polynomial","basic spline","natural cubic spline"), adj_R_square)
colnames(table) <- c("Model","Adjusted R-squared")
table
ggplot(data = dt1, aes(x = mABC_AGE, y = mABC_TotalStandardScore)) +
geom_point() +
geom_smooth() +
geom_smooth(method = "lm", col = "red")
llr <- function(x,y,z,omega) {
fits <- sapply(z, compute_f_hat, x, y, omega)
return(fits)
}
compute_f_hat <- function(z, x, y, omega) {
Wz <- make_weight_matrix(z, x, omega)
X <- make_predictor_matrix(x)
f_hat <- c(1,z) %*% solve(t(X) %*% Wz %*% X) %*% t(X) %*% Wz %*% y
return(f_hat)
}
make_weight_matrix <- function(z, x, omega) {
r <- abs(x - z) / omega
w <- ifelse(abs(r) < 1, (1-abs(r)^3)^3, 0)
return(w)
}
make_predictor_matrix <- function(x) {
X <- cbind(1, x)
return(X)
}
n = 150
omega = 2
x = rnorm(n)
y = rnorm(x + rnorm(n))
z = seq(-1, 1, length.out = 100)
llr(x,y,z,omega)[1]
make_weight_matrix <- function(z, x, omega) {
r <- abs(x - z) / omega
w <- ifelse(abs(r) < 1, (1-abs(r)^3)^3, 0)
W <- diag(w)
return(W)
}
llr(x,y,z,omega)[1]
make_weight_matrix <- function(z, x, omega) {
r <- abs(x - z) / omega
w <- ifelse(abs(r) < 1, (1-abs(r)^3)^3, 0)
return(w)
}
w <- c(1:3)
x <- matrix(c(1,1,1),c(2:4))
x <- matrix(c(1,1,1,2,3,4))
x <- matrix(c(1,1,1,2,3,4), nrow = 3)
x
w %*% x
diag(w) %*% x
apply(x, 1, function(x) x*w)
x*3
mapply(function(x, w) x*w, x, w)
matrix(mapply(function(x, w) x*w, x, w), nrow=3)
compute_f_hat <- function(z, x, y, omega) {
Wz <- make_weight_matrix(z, x, omega)
X <- make_predictor_matrix(x)
WX <- matrix(mapply(function(X, Wz) X*Wz, X, Wz), nrow=nrow(X))
Wy <- matrix(mapply(function(y, Wz) y*Wz, y, Wz), nrow=nrow(y))
f_hat <- c(1,z) %*% solve(t(X) %*% WX) %*% t(X) %*% Wy
return(f_hat)
}
make_weight_matrix <- function(z, x, omega) {
r <- abs(x - z) / omega
w <- ifelse(abs(r) < 1, (1-abs(r)^3)^3, 0)
return(w)
}
llr(x,y,z,omega)
w*x
diag(w) %>% x
diag(w) %*% x
apply(x, 1, *)
apply(x, 1, *3)
apply(x, 1, function(x) x*3)
apply(x, 2, function(x) x*3)
mapply(function(x,w) w*x, x,w)
compute_f_hat <- function(z, x, y, omega) {
W <- make_weight_matrix(z, x, omega)
X <- make_predictor_matrix(x)
WX <- matrix(mapply(function(X, W) W*X, X, W), nrow=nrow(X))
Wy <- matrix(mapply(function(y, W) W*y, y, W), nrow=nrow(y))
f_hat <- c(1,z) %*% solve(t(X) %*% WX) %*% t(X) %*% Wy
return(f_hat)
}
llr(x,y,z,omega)
y <- c(3:5)
y <- c(3:3)
y <- c(3:5)
w*y
apply(y, 2, function(x) w*x)
apply(y, 2, function(x) w*y)
apply(y, 2, function(x) w*x)
apply(y, 2, function(t) w*t)
apply(x, 2, function(t) w*t)
y
n = 150
omega = 2
x = rnorm(n)
y = rnorm(x + rnorm(n))
z = seq(-1, 1, length.out = 100)
y <- c(3:5)
y <- matrix(y)
apply(y, 2, function(t) w*t)
compute_f_hat <- function(z, x, y, omega) {
W <- make_weight_matrix(z, x, omega)
X <- make_predictor_matrix(x)
y <- matrix(y)
WX <- apply(X, 2, function(t) w*t)
Wy <- apply(y, 2, function(t) w*t)
f_hat <- c(1,z) %*% solve(t(X) %*% WX) %*% t(X) %*% Wy
return(f_hat)
}
y = rnorm(x + rnorm(n))
llr(x,y,z,omega)
compute_f_hat <- function(z, x, y, omega) {
Wz <- make_weight_matrix(z, x, omega)
X <- make_predictor_matrix(x)
f_hat <- c(1,z) %*% solve(t(X) %*% Wz %*% X) %*% t(X) %*% Wz %*% y
return(f_hat)
}
make_weight_matrix <- function(z, x, omega) {
r <- abs(x - z) / omega
w <- ifelse(abs(r) < 1, (1-abs(r)^3)^3, 0)
W <- diag(w)
return(W)
}
llr(x,y,z,omega)
compute_f_hat <- function(z, x, y, omega) {
W <- make_weight_matrix(z, x, omega)
X <- make_predictor_matrix(x)
y <- matrix(y)
WX <- apply(X, 2, function(t) w*t)
Wy <- apply(y, 2, function(t) w*t)
f_hat <- c(1,z) %*% solve(t(X) %*% WX) %*% t(X) %*% Wy
return(f_hat)
}
make_weight_matrix <- function(z, x, omega) {
r <- abs(x - z) / omega
w <- ifelse(abs(r) < 1, (1-abs(r)^3)^3, 0)
return(w)
}
llr(x,y,z,omega)
X <- cbind(1, 2:4)
X
y <- matrix(6:9)
y <- matrix(6:8)
y
w*X
w*y
y = rnorm(x + rnorm(n))
W <- make_weight_matrix(z,x,omega)
W <- make_weight_matrix(z[1],x,omega)
X <- make_predictor_matrix(x)
compute_f_hat <- function(z, x, y, omega) {
W <- make_weight_matrix(z, x, omega)
X <- make_predictor_matrix(x)
y <- matrix(y)
WX <- apply(X, 2, function(t) W*t)
Wy <- apply(y, 2, function(t) W*t)
f_hat <- c(1,z) %*% solve(t(X) %*% WX) %*% t(X) %*% Wy
return(f_hat)
}
compute_f_hat <- function(z, x, y, omega) {
W <- make_weight_matrix(z, x, omega)
X <- make_predictor_matrix(x)
y <- matrix(y)
WX <- apply(X, 2, function(t) W*t)
Wy <- apply(y, 2, function(t) W*t)
f_hat <- c(1,z) %*% solve(t(X) %*% WX) %*% t(X) %*% Wy
return(f_hat)
}
make_weight_matrix <- function(z, x, omega) {
r <- abs(x - z) / omega
w <- ifelse(abs(r) < 1, (1-abs(r)^3)^3, 0)
return(w)
}
llr(x,y,z,omega)
compute_f_hat <- function(z, x, y, omega) {
Wz <- make_weight_matrix(z, x, omega)
X <- make_predictor_matrix(x)
f_hat <- c(1,z) %*% solve(t(X) %*% Wz %*% X) %*% t(X) %*% Wz %*% y
return(f_hat)
}
make_weight_matrix <- function(z, x, omega) {
r <- abs(x - z) / omega
w <- ifelse(abs(r) < 1, (1-abs(r)^3)^3, 0)
W <- diag(w)
return(W)
}
llr(x,y,z,omega = )
llr(x,y,z,omega = 2)
compute_f_hat <- function(z, x, y, omega) {
W <- make_weight_matrix(z, x, omega)
X <- make_predictor_matrix(x)
y <- matrix(y)
WX <- apply(X, 2, function(t) W*t)
Wy <- apply(y, 2, function(t) W*t)
f_hat <- c(1,z) %*% solve(t(X) %*% WX) %*% t(X) %*% Wy
return(f_hat)
}
make_weight_matrix <- function(z, x, omega) {
r <- abs(x - z) / omega
w <- ifelse(abs(r) < 1, (1-abs(r)^3)^3, 0)
return(w)
}
m <- unlist(summary(microbenchmark(llr(x,y,x,omega))))
library(microbenchmark)
source("llr_function.R")
setwd("~/Desktop")
setwd("~/Desktop/homeWork")
source("llr_function.R")
m <- unlist(summary(microbenchmark(llr(x,y,x,omega))))
time <- unname(m[4])
cat("It takes", time, "milliseconds for the function to run.")
